apply plugin: 'com.android.application'
apply plugin: 'jacoco'
//apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
//apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def getVersionName = { ->
    return '1.00.61';
}

def getVersionCode = { ->
    return 10061
}

def getBaseName = { ->
    return "Folding@Home_" + getVersionName();
}

android {
    useLibrary 'org.apache.http.legacy'
    testBuildType "debugTestMode"
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def apk = output.outputFileName;
            def newName;
            newName = apk.replace(project.name, getBaseName());
            output.outputFileName = new File(apk, newName);
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    defaultConfig {
        applicationId "com.sonymobile.androidapp.gridcomputing"
        testApplicationId "com.sonymobile.androidapp.gridcomputing.test"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        versionCode getVersionCode()
        versionName getVersionName()
        multiDexEnabled true
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_STL=c++_shared"
            }
        }
        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    buildTypes {
        //should set the field TEST_MODE=false for ALL build types and true only for debugTestMode
        releaseUnsigned {
            buildConfigField "boolean", "TEST_MODE", "false"
            buildConfigField "boolean", "REPORT_ANALYTICS", "true"
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "TEST_MODE", "false"
            buildConfigField "boolean", "REPORT_ANALYTICS", "true"
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
            buildConfigField "boolean", "TEST_MODE", "false"
            buildConfigField "boolean", "REPORT_ANALYTICS", "true"
            testCoverageEnabled true
            debuggable true
            applicationIdSuffix ".dev"
        }

        debugTestMode {
            signingConfig signingConfigs.debug
            buildConfigField "boolean", "TEST_MODE", "true"
            buildConfigField "boolean", "REPORT_ANALYTICS", "true"
            testCoverageEnabled true
            debuggable true
            applicationIdSuffix ".debug"
        }
    }


    lintOptions {
        lintConfig file("cq-configs/lint/lint.xml")
        xmlOutput file("build/reports/lint/lint-result.xml")
        htmlOutput file("build/reports/lint/lint-result.html")
        checkReleaseBuilds true
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/com.sonymobile.androidapp.gridcomputing'
        main {
            jniLibs.srcDirs = ['src/main/libs'] //native *.so dir
            jni.srcDirs = [] //disable automatic ndk-build
        }
    }


    ndkVersion "21.3.6528147"
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.google.android.gms:play-services-games:8.4.0'
    implementation 'com.google.android.gms:play-services-plus:8.4.0'
    implementation 'com.facebook.android:facebook-android-sdk:4.6.0'
    implementation 'de.greenrobot:eventbus:2.4.0'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.0'
    implementation 'com.airbnb.android:lottie:3.4.0'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    //implementation project(':libraries:google-games')

    implementation('com.twitter.sdk.android:twitter:2.2.0@aar') {
        transitive = true;
    }
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.navigation:navigation-fragment:2.0.0'
    implementation 'androidx.navigation:navigation-ui:2.0.0'
    implementation 'androidx.preference:preference:1.1.1'

    testImplementation 'junit:junit:4.12'

    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation('androidx.test.ext:junit:1.1.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation('androidx.test.espresso:espresso-web:3.1.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation 'com.jayway.android.robotium:robotium-solo:5.6.0'
}

pmd {
    toolVersion = '4.2.6'
}

task pmd(type: Pmd) {
    ignoreFailures = true
    source = fileTree('src/main/java')
    ruleSets = ["basic", "braces", "strings", "design", "unusedcode", "android"]
    include '**/*.java'
    exclude '**/gen/**'
    reports {
        xml.enabled = true
    }
}

task checkstyleMain(type: Checkstyle) {
    configFile file("cq-configs/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("cq-configs/checkstyle/checkstyle_suppressions.xml").absolutePath
    source = fileTree('src/main/java')
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
    ignoreFailures = true
    /* reports {
         html {
             enabled false
         }
         xml.destination = "build/reports/myReport.xml"
         /*xml.enabled = true
         xml.destination = "${buildDir}/reports/checkstyle/checkstyle.xml"
     }*/
}



task checkstyleHtml(dependsOn: checkstyleMain) {
    doLast {
        ant.xslt(in: checkstyleMain.reports.xml.destination,
                style: file('cq-configs/checkstyle/checkstyle-html.xsl'),
                out: new File(checkstyleMain.reports.xml.destination.parent, 'checkstyle.html'))
    }
}
checkstyleMain.finalizedBy checkstyleHtml

/*task findbugs(type: FindBugs, dependsOn: "assembleDebug") {
    description 'Run findbugs'
    group 'verification'
    classes = fileTree('build/intermediates/classes/debug/')
    source = fileTree('src/main/java')
    classpath = files()
    effort = 'max'
    ignoreFailures = 'true'
    excludeFilter = file("cq-configs/findbugs/exclude.xml")
    reports {
        xml.enabled = true
        html.enabled = false
    }
}*/

task zipSource(type: Zip) {
    from('src')
    archiveBaseName = getBaseName() + "_source"
}

task zipTests(type: Zip) {
    from('src/androidTest')
    archiveBaseName = getBaseName() + "_test"
}

task zipMapping(type: Zip) {
    from('build/outputs/mapping')
    archiveBaseName = "mapping"
}

task javadocs(type: Javadoc) {
    failOnError false
    source = 'src/main/java'
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'createDebugTestModeCoverageReport') {
    def coverageSourceDirs = [
            "${buildDir.parent}/src/main/java"
    ]
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    getClassDirectories().setFrom(fileTree(
            dir: "${buildDir}/intermediates/classes",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    ))
    getSourceDirectories().setFrom(files(coverageSourceDirs))
    getAdditionalSourceDirs().setFrom(files(coverageSourceDirs))
    getExecutionData().setFrom(files(
            "${buildDir}/outputs/code-coverage/connected/flavors/INTERNAL/coverage.ec"
    ))
    /*reports {
        xml {
            enabled = true
            destination "${buildDir}/reports/jacoco/jacoco.xml"
        }
        csv.enabled false
        html {
            enabled true
            destination "${buildDir}/jacocoHtml"
        }
    }*/
}